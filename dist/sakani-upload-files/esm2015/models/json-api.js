export class JsonApi {
    constructor() {
        this.relationships = {};
    }
    static buildFromObject(type, object) {
        const obj = new type();
        Object.keys(obj).forEach((key) => {
            if (object && object[key] != null) {
                obj[key] = object[key];
            }
        });
        return obj;
    }
    static parseJsonApi(type, data, included) {
        const obj = new type();
        if (Object.keys(obj).length === 0) {
            return new type(data === null || data === void 0 ? void 0 : data.attributes);
        }
        obj.data = data || {};
        obj.included = included || [];
        obj.id = obj.data.id;
        obj.type = obj.data.type;
        Object.keys(obj).forEach((key) => {
            if (obj.data.attributes[key.toString()] != null) {
                obj[key] = obj.data.attributes[key];
            }
        });
        if (obj.data.relationships) {
            Object.entries(obj.data.relationships).forEach(([key, val]) => {
                if (val.data) {
                    obj[key] = JsonApi.getRelationship(obj, obj.relationships[key], val);
                }
            });
        }
        return obj;
    }
    static getRelationship(obj, relationship, val) {
        if (!relationship) {
            return;
        }
        if (relationship.rel === 'has_one') {
            const data = obj.included.find((item) => {
                return item.type === val.data.type && item.id === val.data.id;
            });
            return JsonApi.parseJsonApi(relationship.model, data, obj.included);
        }
        if (relationship.rel === 'has_many') {
            const data = [];
            val.data.forEach((element) => {
                const matchItem = obj.included.find((item) => {
                    return element.type === item.type && element.id === item.id;
                });
                data.push(JsonApi.parseJsonApi(relationship.model, matchItem));
            });
            return data;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbi1hcGkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zYWthbmktdXBsb2FkLWZpbGVzL3NyYy9tb2RlbHMvanNvbi1hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxPQUFPLE9BQU87SUFBcEI7UUFLRSxrQkFBYSxHQUFTLEVBQUUsQ0FBQztJQTJFM0IsQ0FBQztJQXpFQyxNQUFNLENBQUMsZUFBZSxDQUFvQixJQUFpQixFQUFFLE1BQVc7UUFDdEUsTUFBTSxHQUFHLEdBQVEsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQy9CLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUU7Z0JBQ2pDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDeEI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZLENBQ2pCLElBQTJCLEVBQzNCLElBQVMsRUFDVCxRQUFnQjtRQUVoQixNQUFNLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBUyxDQUFDO1FBRTlCLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ25DO1FBRUQsR0FBRyxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3RCLEdBQUcsQ0FBQyxRQUFRLEdBQUcsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUU5QixHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ3JCLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFekIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUMvQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJLElBQUksRUFBRTtnQkFDL0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQzVDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFnQixFQUFFLEVBQUU7Z0JBQzVCLElBQUksR0FBRyxDQUFDLElBQUksRUFBRTtvQkFDWixHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLGVBQWUsQ0FDaEMsR0FBRyxFQUNILEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEVBQ3RCLEdBQUcsQ0FDSixDQUFDO2lCQUNIO1lBQ0gsQ0FBQyxDQUNGLENBQUM7U0FDSDtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxlQUFlLENBQUMsR0FBUSxFQUFFLFlBQWlCLEVBQUUsR0FBUTtRQUMxRCxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE9BQU87U0FDUjtRQUVELElBQUksWUFBWSxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDbEMsTUFBTSxJQUFJLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtnQkFDM0MsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDaEUsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3JFO1FBRUQsSUFBSSxZQUFZLENBQUMsR0FBRyxLQUFLLFVBQVUsRUFBRTtZQUNuQyxNQUFNLElBQUksR0FBRyxFQUFTLENBQUM7WUFDdkIsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFZLEVBQUUsRUFBRTtnQkFDaEMsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtvQkFDaEQsT0FBTyxPQUFPLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksT0FBTyxDQUFDLEVBQUUsS0FBSyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUM5RCxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBKc29uQXBpIHtcbiAgaWQ/OiBhbnk7XG4gIHR5cGU/OiBzdHJpbmc7XG4gIGRhdGE/OiBhbnk7XG4gIGluY2x1ZGVkPzogYW55W107XG4gIHJlbGF0aW9uc2hpcHM/OiBhbnkgPSB7fTtcblxuICBzdGF0aWMgYnVpbGRGcm9tT2JqZWN0PFQgZXh0ZW5kcyBKc29uQXBpPih0eXBlOiBuZXcgKCkgPT4gVCwgb2JqZWN0OiBhbnkpOiBUIHtcbiAgICBjb25zdCBvYmo6IGFueSA9IG5ldyB0eXBlKCk7XG4gICAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChvYmplY3QgJiYgb2JqZWN0W2tleV0gIT0gbnVsbCkge1xuICAgICAgICBvYmpba2V5XSA9IG9iamVjdFtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VKc29uQXBpPFQgZXh0ZW5kcyBKc29uQXBpPihcbiAgICB0eXBlOiBuZXcgKGpzb24/OiBhbnkpID0+IFQsXG4gICAgZGF0YTogYW55LFxuICAgIGluY2x1ZGVkPzogYW55W11cbiAgKTogVCB7XG4gICAgY29uc3Qgb2JqID0gbmV3IHR5cGUoKSBhcyBhbnk7XG5cbiAgICBpZiAoT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBuZXcgdHlwZShkYXRhPy5hdHRyaWJ1dGVzKTtcbiAgICB9XG5cbiAgICBvYmouZGF0YSA9IGRhdGEgfHwge307XG4gICAgb2JqLmluY2x1ZGVkID0gaW5jbHVkZWQgfHwgW107XG5cbiAgICBvYmouaWQgPSBvYmouZGF0YS5pZDtcbiAgICBvYmoudHlwZSA9IG9iai5kYXRhLnR5cGU7XG5cbiAgICBPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgaWYgKG9iai5kYXRhLmF0dHJpYnV0ZXNba2V5LnRvU3RyaW5nKCldICE9IG51bGwpIHtcbiAgICAgICAgb2JqW2tleV0gPSBvYmouZGF0YS5hdHRyaWJ1dGVzW2tleV07XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAob2JqLmRhdGEucmVsYXRpb25zaGlwcykge1xuICAgICAgT2JqZWN0LmVudHJpZXMob2JqLmRhdGEucmVsYXRpb25zaGlwcykuZm9yRWFjaChcbiAgICAgICAgKFtrZXksIHZhbF06IFtzdHJpbmcsIGFueV0pID0+IHtcbiAgICAgICAgICBpZiAodmFsLmRhdGEpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gSnNvbkFwaS5nZXRSZWxhdGlvbnNoaXAoXG4gICAgICAgICAgICAgIG9iaixcbiAgICAgICAgICAgICAgb2JqLnJlbGF0aW9uc2hpcHNba2V5XSxcbiAgICAgICAgICAgICAgdmFsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgc3RhdGljIGdldFJlbGF0aW9uc2hpcChvYmo6IGFueSwgcmVsYXRpb25zaGlwOiBhbnksIHZhbDogYW55KSB7XG4gICAgaWYgKCFyZWxhdGlvbnNoaXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocmVsYXRpb25zaGlwLnJlbCA9PT0gJ2hhc19vbmUnKSB7XG4gICAgICBjb25zdCBkYXRhID0gb2JqLmluY2x1ZGVkLmZpbmQoKGl0ZW06IGFueSkgPT4ge1xuICAgICAgICByZXR1cm4gaXRlbS50eXBlID09PSB2YWwuZGF0YS50eXBlICYmIGl0ZW0uaWQgPT09IHZhbC5kYXRhLmlkO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gSnNvbkFwaS5wYXJzZUpzb25BcGkocmVsYXRpb25zaGlwLm1vZGVsLCBkYXRhLCBvYmouaW5jbHVkZWQpO1xuICAgIH1cblxuICAgIGlmIChyZWxhdGlvbnNoaXAucmVsID09PSAnaGFzX21hbnknKSB7XG4gICAgICBjb25zdCBkYXRhID0gW10gYXMgYW55O1xuICAgICAgdmFsLmRhdGEuZm9yRWFjaCgoZWxlbWVudDogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IG1hdGNoSXRlbSA9IG9iai5pbmNsdWRlZC5maW5kKChpdGVtOiBhbnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gZWxlbWVudC50eXBlID09PSBpdGVtLnR5cGUgJiYgZWxlbWVudC5pZCA9PT0gaXRlbS5pZDtcbiAgICAgICAgfSk7XG4gICAgICAgIGRhdGEucHVzaChKc29uQXBpLnBhcnNlSnNvbkFwaShyZWxhdGlvbnNoaXAubW9kZWwsIG1hdGNoSXRlbSkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==