import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup, NgControl } from '@angular/forms';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { Observable, Subscription } from 'rxjs';
import { FileDataInterface } from '../interfaces/file-data.interface';
import { SakaniUploadFilesService } from './sakani-upload-files.service';
import * as i0 from "@angular/core";
export declare class SakaniUploadFilesComponent implements ControlValueAccessor, OnInit, OnDestroy {
    private control;
    private formBuilder;
    private SakaniUploadFilesService;
    private modalService;
    filesControl: FormControl;
    currentPreviewItem: FileDataInterface;
    filesForm: FormGroup;
    formSubscription: Subscription;
    formChanged: EventEmitter<any>;
    translateService: any;
    isActiveStorage: boolean;
    headers: any;
    endpointAPI: string;
    required: boolean;
    placeholder: string;
    uploading: boolean;
    allowMultiple: boolean;
    label: string;
    itemWrapperClass: string;
    allowContentType: string;
    readonly: boolean;
    uploader: string | null;
    folder: string | null;
    maxFileSize: number;
    processUploadEvent: EventEmitter<string[]>;
    deleteFileEvent: EventEmitter<FileDataInterface>;
    fileOnClickEvent: EventEmitter<FileDataInterface>;
    previewTpl: ElementRef<any>;
    fileDataStatus: {
        WAITING: string;
        UPLOADING: string;
        UPLOADED: string;
        ERROR: string;
    };
    errors: string;
    constructor(control: NgControl, formBuilder: FormBuilder, SakaniUploadFilesService: SakaniUploadFilesService, modalService: NgbModal);
    ngOnInit(): void;
    ngOnDestroy(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    subscriptionFilesForm(): void;
    writeValue(controls: any): void;
    handleUploadItem(item: FileDataInterface): Observable<string | undefined>;
    isFileUrlImage(type: string): boolean;
    handleUploadItems(items: FileDataInterface[]): void;
    addFiles(event: Event): void;
    readFile(file: File, fileData: FileDataInterface): void;
    downloadFile(file: FileDataInterface): void;
    addControlForm(fileData: FileDataInterface): void;
    reUpload($event: Event, item: FileDataInterface): void;
    fileOnClick(item: FileDataInterface): void;
    previewItem(item: FileDataInterface): void;
    getPreviewImage(): string | void;
    get getFormValues(): any[];
    closePreview(): void;
    isInvalid(item: FileDataInterface): boolean;
    remove($event: Event, file: FileDataInterface): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SakaniUploadFilesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SakaniUploadFilesComponent, "lib-sakani-upload-files", never, { "translateService": "translateService"; "isActiveStorage": "isActiveStorage"; "headers": "headers"; "endpointAPI": "endpointAPI"; "required": "required"; "placeholder": "placeholder"; "uploading": "uploading"; "allowMultiple": "allowMultiple"; "label": "label"; "itemWrapperClass": "itemWrapperClass"; "allowContentType": "allowContentType"; "readonly": "readonly"; "uploader": "uploader"; "folder": "folder"; "maxFileSize": "maxFileSize"; }, { "processUploadEvent": "processUploadEvent"; "deleteFileEvent": "deleteFileEvent"; "fileOnClickEvent": "fileOnClickEvent"; }, never, never>;
}
